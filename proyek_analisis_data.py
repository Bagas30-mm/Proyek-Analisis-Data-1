# -*- coding: utf-8 -*-
"""Proyek Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLmisnlGpcIkoCymuEw1KDkCO0gTHOsd

# Proyek Analisis Data: [Bike-Sharing-Dataset]
- **Nama:** [Bagas Rizky Ramadhan]
- **Email:** [bagasramadhan@apps.ipb.ac.id]
- **ID Dicoding:** [Bagas Rizky Ramadhan - mc001d5y1201]

## Menentukan Pertanyaan Bisnis

- Pertanyaan 1: Bagaimana pengaruh waktu dalam sehari terhadap tingkat penyewaan sepeda?

- Pertanyaan 2: Bagaimana pola penggunaan sepeda pada hari kerja dibandingkan dengan akhir pekan?

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

import pandas as pd

# Fungsi untuk memuat dataset
def load_dataset(file_name):
    try:
        data = pd.read_csv(file_name)
        print(f"File '{file_name}' berhasil dimuat.")
        return data
    except FileNotFoundError:
        print(f"Error: File '{file_name}' tidak ditemukan.")
    except Exception as error:
        print(f"Terjadi kesalahan saat memuat file '{file_name}': {error}")
    return None

# Memuat dataset day.csv
bike_daily_data = load_dataset('/content/day.csv')
if bike_daily_data is not None:
    print("Beberapa baris awal dataset harian:")
    print(bike_daily_data.head())

# Memuat dataset hour.csv
bike_hourly_data = load_dataset('/content/hour.csv')
if bike_hourly_data is not None:
    print("Beberapa baris awal dataset per jam:")
    print(bike_hourly_data.head())

"""**Insight:**
- Dataset harian berisi 731 entri, masing-masing mewakili satu hari penuh, cocok untuk analisis pola makro seperti tren musiman atau perbandingan hari kerja dan akhir pekan.

- Dataset per jam memiliki 17.379 entri, memberikan granularitas lebih tinggi untuk analisis pola penyewaan berdasarkan waktu dalam sehari, seperti jam-jam sibuk (peak hours).

- Kolom-kolom seperti temp, hum, windspeed, dan cnt muncul di kedua dataset, memungkinkan analisis serupa dalam skala waktu yang berbeda (harian dan per jam).

### Assessing Data
"""

# Bentuk Data
print("Ukuran data_harian:", bike_daily_data.shape) # Changed df_day to bike_daily_data
print("Ukuran data_jam:", bike_hourly_data.shape) # Changed df_hour to bike_hourly_data

# Informasi Data dan Missing Values
print("\nInfo data_harian:")
bike_daily_data.info() # Changed df_day to bike_daily_data
print("\nNilai hilang di data_harian:", bike_daily_data.isnull().sum()) # Changed df_day to bike_daily_data

print("\nInfo data_jam:")
bike_hourly_data.info() # Changed df_hour to bike_hourly_data
print("\nNilai hilang di data_jam:", bike_hourly_data.isnull().sum()) # Changed df_hour to bike_hourly_data

# Statistik Data
print("\nStatistik deskriptif untuk data_harian:")
print(bike_daily_data.describe()) # Changed df_day to bike_daily_data
print("\nStatistik deskriptif untuk data_jam:")
print(bike_hourly_data.describe()) # Changed df_hour to bike_hourly_data

# Deteksi Outlier Sederhana
print("\nOutlier Potensial:")
for data, nama in zip([bike_daily_data, bike_hourly_data], ['data_harian', 'data_jam']): # Changed df_day to bike_daily_data and df_hour to bike_hourly_data
    print(f"\n{nama}:")
    for kolom in ['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']:
        iqr = data[kolom].quantile(0.75) - data[kolom].quantile(0.25)
        batas_atas = data[kolom].quantile(0.75) + 1.5 * iqr
        batas_bawah = data[kolom].quantile(0.25) - 1.5 * iqr
        jumlah_outlier = data[(data[kolom] > batas_atas) | (data[kolom] < batas_bawah)]
        print(f"  Kolom '{kolom}': {len(jumlah_outlier)} outlier")

"""**Insight:**
- Data Bebas dari Missing Values: Kedua dataset, baik data harian maupun data per jam, tidak memiliki nilai kosong di setiap kolom. Ini menunjukkan bahwa data dalam kondisi bersih dan siap untuk digunakan tanpa perlu proses imputasi.

- Distribusi Kolom Numerik: Statistik deskriptif menunjukkan bahwa variabel seperti temp, hum, dan windspeed memiliki distribusi yang konsisten tanpa outlier signifikan, yang memberikan dasar yang baik untuk analisis lebih lanjut.

### Cleaning Data
"""

# Konversi kolom 'dteday' menjadi format datetime
bike_daily_data['dteday'] = pd.to_datetime(bike_daily_data['dteday']) # Changed df_day to bike_daily_data
bike_hourly_data['dteday'] = pd.to_datetime(bike_hourly_data['dteday']) # Changed df_hour to bike_hourly_data

# Penanganan outlier menggunakan metode IQR
def handle_outliers(df, columns):
    for col in columns:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        df[col] = df[col].clip(lower=Q1 - 1.5 * IQR, upper=Q3 + 1.5 * IQR)

# Terapkan penanganan outlier untuk kedua dataset
columns_to_clip = ['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']
handle_outliers(bike_daily_data, columns_to_clip) # Changed df_day to bike_daily_data
handle_outliers(bike_hourly_data, columns_to_clip) # Changed df_hour to bike_hourly_data

# Tampilkan beberapa baris data setelah perubahan
print(bike_daily_data.head()) # Changed df_day to bike_daily_data
print(bike_hourly_data.head()) # Changed df_hour to bike_hourly_data

"""**Insight:**
- Konversi Format Tanggal Berhasil: Kolom dteday pada kedua dataset berhasil diubah ke format datetime, memungkinkan analisis berbasis waktu menjadi lebih akurat dan efisien.

- Outlier Berhasil Ditangani: Outlier pada fitur numerik seperti temp, hum, windspeed, casual, dan registered telah berhasil ditangani menggunakan metode IQR (Interquartile Range), memastikan analisis data tidak bias akibat nilai ekstrem.

## Exploratory Data Analysis (EDA)

### Explore ...
"""

# Pola Penyewaan Hari Kerja vs Akhir Pekan (data per jam)
pola_mingguan_jam = bike_hourly_data.groupby('weekday')['cnt'].mean() # Changed 'weekend' to 'weekday'
print("\nPola Hari Kerja vs Akhir Pekan (Data Per Jam):")
print(pola_mingguan_jam)

# Pola Penyewaan Hari Kerja vs Akhir Pekan (data harian)
pola_mingguan_harian = bike_daily_data.groupby('weekday')['cnt'].mean() # Changed 'weekend' to 'weekday'
print("\nPola Hari Kerja vs Akhir Pekan (Data Harian):")
print(pola_mingguan_harian)

"""**Insight:**
- Pola Penyewaan Sepeda Per Jam: Dari analisis data per jam, terlihat adanya puncak penyewaan sepeda pada pagi hari sekitar pukul 07.00-09.00 dan sore hari sekitar pukul 17.00-19.00, yang menunjukkan tingginya penggunaan sepeda pada jam kerja atau jam sibuk.

- Penyewaan Sepeda Berdasarkan Hari: Penyewaan sepeda cenderung lebih tinggi pada hari kerja dibandingkan akhir pekan, yang dapat dihubungkan dengan penggunaan sepeda untuk aktivitas rutin seperti perjalanan kerja atau sekolah.

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""



import matplotlib.pyplot as plt

# Assuming hourly_rental contains the data as a pandas Series
hourly_rental_patterns = bike_hourly_data.groupby('hr')['cnt'].mean()

# Visualisasi untuk Pertanyaan 1: Pola Penyewaan Sepeda Per Jam
plt.figure(figsize=(10, 6))
plt.plot(hourly_rental_patterns.index, hourly_rental_patterns.values, 'o-', color='skyblue', label='Rata-rata Penyewaan')
plt.xlabel('Jam dalam Sehari')
plt.ylabel('Rata-rata Penyewaan Sepeda')
plt.title('Pola Penyewaan Sepeda Per Jam')
plt.xticks(range(24), rotation=45)
plt.legend(loc='upper right')
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# Analisis Explanatory untuk Pertanyaan 1
# (Tambahkan analisis di sini berdasarkan pola dari visualisasi)
# Contoh: "Grafik menunjukkan bahwa puncak penyewaan terjadi pada pagi hari sekitar jam ... dan sore hari sekitar jam ...".

"""### Pertanyaan 2:"""

import matplotlib.pyplot as plt

# Rata-rata Penyewaan Berdasarkan Hari (Per Jam)
rata_per_jam = bike_hourly_data.groupby('workingday')['cnt'].mean() # Changed 'weekend' to 'workingday'
plt.bar(rata_per_jam.index, rata_per_jam.values, color=['salmon', 'limegreen'])
plt.title('Penyewaan: Weekday vs Weekend (Per Jam)')
plt.xlabel('Working Day (0 = Weekend/Holiday, 1 = Working Day)') # Changed x-axis label for clarity
plt.ylabel('Rata-rata Penyewaan')
plt.grid(axis='y', alpha=0.5)
plt.show()

# Rata-rata Penyewaan Berdasarkan Hari (Harian)
rata_per_hari = bike_daily_data.groupby('workingday')['cnt'].mean() # Changed df_day to bike_daily_data and 'weekend' to 'workingday'
plt.bar(rata_per_hari.index, rata_per_hari.values, color=['salmon', 'limegreen'])
plt.title('Penyewaan: Weekday vs Weekend (Harian)')
plt.xlabel('Working Day (0 = Weekend/Holiday, 1 = Working Day)') # Changed x-axis label for clarity
plt.ylabel('Rata-rata Penyewaan')
plt.grid(axis='y', alpha=0.5)
plt.show()

"""**Insight:**
- Pengaruh Waktu dalam Sehari terhadap Penyewaan Sepeda (Pertanyaan 1): Grafik menunjukkan bahwa puncak penyewaan sepeda terjadi pada pagi hari (sekitar pukul 07.00-09.00) dan sore hari (sekitar pukul 17.00-19.00). Hal ini mengindikasikan bahwa sepeda lebih sering digunakan untuk perjalanan rutin, seperti pergi dan pulang kerja atau sekolah.
- Pola Penyewaan Berdasarkan Hari Kerja dan Akhir Pekan: Grafik menunjukkan bahwa rata-rata penyewaan sepeda lebih tinggi pada akhir pekan dibandingkan hari kerja, yang mengindikasikan adanya peningkatan aktivitas rekreasi saat akhir pekan.

## Analisis Lanjutan (Opsional)
"""

import matplotlib.pyplot as plt

# Hitung Korelasi
print("Korelasi variabel cuaca dengan penyewaan sepeda (data per jam):")
print(bike_hourly_data[['temp', 'atemp', 'hum', 'windspeed', 'cnt']].corr()['cnt']) # Changed df_hour to bike_hourly_data
print("\nKorelasi variabel cuaca dengan penyewaan sepeda (data harian):")
print(bike_daily_data[['temp', 'atemp', 'hum', 'windspeed', 'cnt']].corr()['cnt']) # Changed df_day to bike_daily_data

# Rata-rata penyewaan berdasarkan situasi cuaca
print("\nRata-rata penyewaan sepeda per situasi cuaca (data per jam):")
print(bike_hourly_data.groupby('weathersit')['cnt'].mean()) # Changed df_hour to bike_hourly_data
print("\nRata-rata penyewaan sepeda per situasi cuaca (data harian):")
print(bike_daily_data.groupby('weathersit')['cnt'].mean()) # Changed df_day to bike_daily_data

# Visualisasi
plt.figure(figsize=(10, 8))

# Grafik 1: Suhu vs Penyewaan (data per jam)
plt.subplot(2, 2, 1)
plt.scatter(bike_hourly_data['temp'], bike_hourly_data['cnt'], color='skyblue', alpha=0.6) # Changed df_hour to bike_hourly_data
plt.xlabel('Suhu')
plt.ylabel('Penyewaan Sepeda')
plt.title('Suhu vs Penyewaan (Per Jam)')

# Grafik 2: Suhu vs Penyewaan (data harian)
plt.subplot(2, 2, 2)
plt.scatter(bike_daily_data['temp'], bike_daily_data['cnt'], color='lightcoral', alpha=0.6) # Changed df_day to bike_daily_data
plt.xlabel('Suhu')
plt.ylabel('Penyewaan Sepeda')
plt.title('Suhu vs Penyewaan (Harian)')

# Grafik 3: Situasi Cuaca vs Penyewaan (data per jam)
plt.subplot(2, 2, 3)
plt.boxplot([bike_hourly_data[bike_hourly_data['weathersit'] == i]['cnt'] for i in bike_hourly_data['weathersit'].unique()], # Changed df_hour to bike_hourly_data
            labels=bike_hourly_data['weathersit'].unique()) # Changed df_hour to bike_hourly_data
plt.xlabel('Situasi Cuaca')
plt.ylabel('Penyewaan Sepeda')
plt.title('Cuaca vs Penyewaan (Per Jam)')

# Grafik 4: Situasi Cuaca vs Penyewaan (data harian)
plt.subplot(2, 2, 4)
plt.boxplot([bike_daily_data[bike_daily_data['weathersit'] == i]['cnt'] for i in bike_daily_data['weathersit'].unique()], # Changed df_day to bike_daily_data
            labels=bike_daily_data['weathersit'].unique()) # Changed df_day to bike_daily_data
plt.xlabel('Situasi Cuaca')
plt.ylabel('Penyewaan Sepeda')
plt.title('Cuaca vs Penyewaan (Harian)')

plt.tight_layout()
plt.show()

"""## Conclusion

- Pengaruh Waktu dalam Sehari terhadap Penyewaan Sepeda: Penyewaan sepeda memuncak pada pagi hari (sekitar pukul 07:00–09:00) dan sore hari (sekitar pukul 17:00–19:00), menunjukkan pola penggunaan sepeda untuk keperluan perjalanan ke dan dari tempat kerja atau sekolah.
- Penyewaan sepeda lebih tinggi pada hari kerja, yang mengindikasikan penggunaan sepeda untuk kebutuhan transportasi harian, seperti perjalanan ke kantor atau sekolah. Namun, pada akhir pekan, meskipun tingkat penyewaan lebih rendah, tetap terdapat penggunaan signifikan yang diduga terkait dengan aktivitas rekreasi atau olahraga.
"""